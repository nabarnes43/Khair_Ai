# # app.py
# from flask import Flask, request, jsonify
# from flask_cors import CORS, cross_origin
# import gradio as gr
# from PIL import Image
# import io
# import base64

# app = Flask(__name__)

# app = Flask(__name__)
# CORS(app, resources={
#     r"/api/*": {
#         "origins": [
#             "http://localhost:5173",
#             "http://localhost:3000"
#         ],
#         "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
#         "allow_headers": [
#             "Content-Type",
#             "Authorization",
#             "Access-Control-Allow-Headers"
#         ],
#         "supports_credentials": True,
#         "max_age": 3600
#     }
# })


# @app.route('/api/test-cors', methods=['GET', 'OPTIONS'])
# def test_cors():
#     return jsonify({"message": "CORS works!"})

# def classify_hair(image):
#     """Your existing hair classification function"""
#     # Replace this with your actual classification logic
#     return {
#         "straight": 0.8,
#         "wavy": 0.1,
#         "curly": 0.05,
#         "coily": 0.03,
#         "protective": 0.02
#     }

# interface = gr.Interface(
#     fn=classify_hair,
#     inputs=gr.Image(),
#     outputs=gr.Label(num_top_classes=5)
# )

# @app.route('/api/analyze', methods=['POST'])
# def analyze_hair():
#     try:
#         print("Received request")  # Debug log
#         image_data = request.json.get('image')
        
#         if not image_data:
#             print("No image data received")  # Debug log
#             return jsonify({'error': 'No image provided'}), 400

#         try:
#             # Handle the incoming base64 image data
#             image_bytes = base64.b64decode(image_data.split(',')[1])
#             image = Image.open(io.BytesIO(image_bytes))
#             print("Image successfully processed")  # Debug log
            
#             # Get classification result
#             result = classify_hair(image)
#             print("Classification complete:", result)  # Debug log
            
#             return jsonify({
#                 'classification': result
#             })
            
#         except Exception as e:
#             print(f"Error processing image: {str(e)}")  # Debug log
#             return jsonify({'error': str(e)}), 400

#     except Exception as e:
#         print(f"Unexpected error: {str(e)}")  # Debug log
#         return jsonify({'error': 'Analysis failed'}), 500

# if __name__ == '__main__':
#     print("Starting Flask server on http://localhost:8000")
#     app.run(debug=True, port=8000)